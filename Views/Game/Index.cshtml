@(await Component.InvokeAsync("Board"))

<style>
    .grid-container {
        display: grid;
        grid-template-columns: repeat(8, 40px);
        grid-template-rows: repeat(8, 30px);
        margin: auto;
    }

    .grid-item {
        border: 1px solid #666;
        background-color: #ddd;
        cursor: move;
    }

    .grid-item.over {
        border: 3px dotted #666;
    }

    [draggable] {
        user-select: none;
    }
</style>

<script>
    var dragSrcEl = null;

    function handleDragStart(e) {
        this.style.opacity = "0.4";
        dragSrcEl = this;
        e.dataTransfer.effectAllowed = "move";
    }

    function handleDragOver(e) {
        if (e.preventDefault) {
            e.preventDefault();
        }
        e.dataTransfer.dropEffect = "move";
        return false;
    }

    function handleDragEnter(e) {
        this.classList.add("over");
    }

    function handleDragLeave(e) {
        this.classList.remove("over");
    }

    function handleDrop(e) {
        if (e.stopPropagation) {
            e.stopPropagation();
        }

        if (dragSrcEl != this) {
            this.replaceWith(this, dragSrcEl);
        }
        return false;
    }

    function handleDragEnd(e) {
        this.style.opacity = "1";
        items.forEach(function(item) {
            item.classList.remove("over");
        });
    }

    let items = document.querySelectorAll(".grid-container .grid-item");
    console.log(items);
    debugger;
    items.forEach(function(item) {
        item.addEventListener("dragstart", handleDragStart, false);
        item.addEventListener("dragenter", handleDragEnter, false);
        item.addEventListener("dragover", handleDragOver, false);
        item.addEventListener("dragleave", handleDragLeave, false);
        item.addEventListener("drop", handleDrop, false);
        item.addEventListener("dragend", handleDragEnd, false);
    });
</script>